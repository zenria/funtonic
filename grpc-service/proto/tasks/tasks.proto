syntax = "proto3";

import "payload.proto";

package grpc_protocol;

service ExecutorService {
  rpc GetTasks (GetTasksRequest) returns (stream GetTaskStreamReply) {}

  rpc TaskExecution (stream TaskExecutionResult) returns (Empty) {}

}

service CommanderService {

  rpc LaunchTask (LaunchTaskRequest) returns (stream LaunchTaskResponse) {}

  rpc Admin (payload.SignedPayload) returns (AdminRequestResponse) {}
}

message AdminRequest {
  oneof requestType {
    /// return a map containing executor client id and metas
    /// (optionnally filtered by query)
    string listConnectedExecutors = 1;
    /// return a map containing executor client id and metas
    /// (optionnally filtered by query)
    string listKnownExecutors = 2;
    Empty listRunningTasks = 3;
    // remove the executor from the database, close the communication channel if present
    // this should trigger a reconnect of the executor, and thus an update of the executor's metadata
    // If the executor is not alive it will be forgotten.
    string dropExecutor = 5;
  }
}

message Token {
  string name = 1;
  string secret = 2;
}

message AdminRequestResponse {
  oneof responseKind {
    string error = 1;
    string jsonResponse = 2;
  }
}

message GetTasksRequest {
  string clientId = 1;
  string clientVersion = 2;
  map<string, Tag> tags = 3;
  string clientProtocolVersion = 4;
}

message Tag {
  oneof tag {
    string value = 1;
    ValueMap value_map = 2;
    ValueList value_list = 3;
  }
}

message ValueMap {
  map<string, Tag> values = 1;
}

message ValueList {
  repeated Tag values= 1;
}

message GetTaskStreamReply {
  string taskId = 1;
  payload.SignedPayload payload = 3;
}

message LaunchTaskRequestPayload {
  oneof task {
    ExecuteCommand executeCommand=1;
    StreamingPayload streamingPayload=2;
  }
}

message LaunchTaskRequest {
  string predicate=2;
  payload.SignedPayload payload=4;
}

message ExecuteCommand {
  string command=1;
}

message StreamingPayload {
  string streamId = 1;
  oneof payload {
    bytes bytes = 2;
    Empty eof = 3;
  }
}

message TaskCompleted {
  int32 returnCode=1;
}
message TaskOutput {
  oneof output {
    string stdout=1;
    string stderr=2;
  }
}

message LaunchTaskResponse {
  oneof task_response {
    // First message sent by the taskserver
    MatchingExecutors matchingExecutors = 1;
    // Generic task output per executor
    TaskExecutionResult taskExecutionResult = 2;
  }
}

message TaskExecutionResult {
  string taskId = 1;
  string clientId = 2;
  oneof execution_result {
    TaskCompleted taskCompleted=3;
    TaskOutput taskOutput=4;
    // executor is executing the task
    Empty ping=5;
    // executor is disconnected (not connected or connection drop)
    Empty disconnected=6;
    // Executor is known by the taskserver and the task payload has been successfully sent
    Empty taskSubmitted = 8;
    // Task exited without any status (killed)
    Empty taskAborted = 9;
  }
}
message Empty {
  // empty
}

message MatchingExecutors {
  repeated string clientId = 1;
}
